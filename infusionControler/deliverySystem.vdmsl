types
	  
	DeliverySystem :: ECGReadings  -- Heart Rate
  									EEGReadings  -- Brain Activity
  									InfusionPump
  									Tocsin;  
	
	-- Sequence of 0s and 1s of size 10
  EEGReadings = seq of nat 
  inv eegR == (forall r in seq eegR & r < 2) and (len eegR = 10);
 
  -- Sequence of numbers of size 3
  ECGReadings = seq of real -- time between beat in centiseconds 1*10^-2 better accuracy
  inv ecgR == (len ecgR = 3) and (forall r in seq ecgR & r >= 2 or r <= 600);
  
  InfusionPump :: active : bool;
  
  Tocsin :: active : bool;
  
values

  maxBPM = 300;
	minBPM = 1;

	maxSTForInfusion = 9;
	
	minST = 0;
  maxST = 10;
  
  burstSuppressionRatio = 10;
	
	lowestBPM = 50;
	highestBPM = 100;
	  
functions
 	
 	-- Uses last 3 readings of time between each beat to calculate BPM
 	calculateBPM(ecgReadings: ECGReadings) bpm: real 
 	post bpm >= minBPM and bpm <= maxBPM;
 			
 	-- Calculates ST from a sequence of 10 segmented EEG readings 
 	calculateST(eegReadings: EEGReadings) suppressionTime: nat 
 	post suppressionTime = burstSuppressionRatio - sumEEGReadings(eegReadings) 
 	and suppressionTime >= minST and suppressionTime <= maxST;
 	
 	 	-- If BPM dips below lowestBPM --> tocsin active	
 	soundTocsin(bpm : real, tocsin: Tocsin) output: bool 
 	pre tocsin.active = false and bpm > lowestBPM and bpm < maxBPM
  post output = tocsin.active = bpm < lowestBPM or bpm > highestBPM;
 	
 	-- Resets the tocsin
 	resetTocsin(tocsin: Tocsin) output: bool 
 	pre tocsin.active = true
 	post output = tocsin.active = false;
 	
 	-- If brain active for more than 1 second --> infuse patient
 	infuse(suppressionTime: real, infusionPump: InfusionPump) output: bool 
 	pre  suppressionTime >= minST and suppressionTime <= maxST
 	post output = infusionPump.active = suppressionTime < minST;
 	  
   -- Calculates number of 1s in sequence.
  sumEEGReadings: seq of real -> real
	sumEEGReadings(eegR) == 
  if eegR = [] 
  then 0 
  else hd eegR + sumEEGReadings(tl eegR) 
  measure len eegR;
  