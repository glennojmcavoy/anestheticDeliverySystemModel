types
	  
	DeliverySystem :: ECGReadings  -- Heart Rate
  									EEGReadings  -- Brain Activity
  									InfusionPump
  									Tocsin;  
	
	-- Sequence of 0s and 1s of size 10
  EEGReadings = seq of nat 
  inv eegR == (forall r in seq eegR & r < 2) and (len eegR = 10);
 
  -- Sequence of numbers of size 3
  ECGReadings = seq of real -- time between beat in centiseconds 1*10^-2 better accuracy
  inv ecgR == (len ecgR = 3) and (forall r in seq ecgR & r >= fastestTimeBetweenBeat or r = 0);
  
  InfusionPump :: active : bool;
  
  Tocsin :: active : bool;
  
values

	lowestBPM = 40;
	minST = 9;
	minute : real = 60;
	burstSuppressionRatio = 10;
	fastestTimeBetweenBeat = 27;
	  
functions
 	
 	-- Uses last 3 readings of time between each beat to calculate BPM
 	calculateBPM(ecgReadings: ECGReadings) bpm: real 
 	post bpm = 
 	if forall r in seq ecgReadings & r = 0 then 0 
 	else (minute / calculateAverageECGValue(ecgReadings)) * 100;
 			
 	-- Calculates ST from a sequence of 10 segmented EEG readings 
 	calculateST(eegReadings: EEGReadings) suppressionTime: nat 
 	post suppressionTime = burstSuppressionRatio - sumEEGReadings(eegReadings);
 	
 	 	-- If BPM dips below lowestBPM --> tocsin active	
 	soundTocsin(bpm : real, tocsin: Tocsin) output: bool 
 	pre tocsin.active = false and bpm < 223
  post output = tocsin.active = bpm < lowestBPM;
 	
 	-- Resets the tocsin
 	resetTocsin(t: Tocsin) output: bool 
 	pre t.active = true
 	post output = t.active = false;
 	
 	-- If brain active for more than 1 second --> infuse patient
 	infuse(supT: real, infusionPump: InfusionPump) output: bool 
 	pre supT < 11
 	post output = infusionPump.active = supT < minST;
 	
 	-- Calculates average value of summed ECG Readings
 	calculateAverageECGValue: seq of real -> real 
	calculateAverageECGValue(hrR) == 
  sumECGReadings(hrR) / len hrR;
 	
 	-- Adds together all the values of heartRate sequence
 	sumECGReadings: seq of real -> real 
	sumECGReadings(hrR) == 
  if hrR = [] or hrR = [0,0,0]
  then 0 
  else hd hrR + sumECGReadings(tl hrR) 
  measure len hrR;
  
   -- Calculates number of 1s in sequence.
  sumEEGReadings: seq of real -> real
	sumEEGReadings(eegR) == 
  if eegR = [] 
  then 0 
  else hd eegR + sumEEGReadings(tl eegR) 
  measure len eegR;
  